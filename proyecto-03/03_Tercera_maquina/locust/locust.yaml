apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust
  namespace: mlops-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locust
  template:
    metadata:
      labels:
        app: locust
    spec:
      containers:
      - name: locust
        image: locustio/locust
        args:
          - -f
          - /mnt/locust/locustfile.py
          - --host=http://10.43.101.202:30601
          - --web-host=0.0.0.0
        ports:
        - containerPort: 8089
        volumeMounts:
        - name: locust-script
          mountPath: /mnt/locust
      volumes:
      - name: locust-script
        configMap:
          name: locust-script
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: locust-script
  namespace: mlops-project
data:
  locustfile.py: |
    from locust import HttpUser, SequentialTaskSet, task, between

    class FlujoDeInferencia(SequentialTaskSet):

        
        @task
        def hacer_prediccion(self):
            payload_predict = {
                                "race": "Caucasian",
                                "gender": "Male",
                                "age": "50-60",
                                "admission_type_id": 1,
                                "time_in_hospital": 7,
                                "num_lab_procedures": 45,
                                "num_procedures": 2,
                                "num_medications": 18,
                                "number_outpatient": 2,
                                "number_emergency": 1,
                                "number_inpatient": 3,
                                "number_diagnoses": 8,
                                "max_glu_serum": ">300",
                                "A1Cresult": ">8",
                                "insulin": "Up",
                                "diabetesMed": "Yes",
                                "encounter_id": 12345,
                                "patient_nbr": 67890,
                                "discharge_disposition_id": 1,
                                "admission_source_id": 7,
                                "weight": ">200",
                                "payer_code": "MC",
                                "medical_specialty": "Cardiology",
                                "diag_1": "414.01",
                                "diag_2": "250.00",
                                "diag_3": "427.31",
                                "metformin": "No",
                                "repaglinide": "No",
                                "nateglinide": "No",
                                "chlorpropamide": "No",
                                "glimepiride": "No",
                                "acetohexamide": "No",
                                "glipizide": "No",
                                "glyburide": "No",
                                "tolbutamide": "No",
                                "pioglitazone": "No",
                                "rosiglitazone": "No",
                                "acarbose": "No",
                                "miglitol": "No",
                                "troglitazone": "No",
                                "tolazamide": "No",
                                "examide": "No",
                                "citoglipton": "No",
                                "glyburide_metformin": "No",
                                "glipizide_metformin": "No",
                                "glimepiride_pioglitazone": "No",
                                "metformin_rosiglitazone": "No",
                                "metformin_pioglitazone": "No",
                                "change": "No"
                                }
            headers = {"Connection": "close"}

            try:
                response = self.client.post("/predict", json=payload_predict, headers=headers, name="üîÆ /predict")
                if response.status_code != 200:
                    print(f"‚ùå Error en la inferencia ({response.status_code}): {response.text}")
            except Exception as e:
                print(f"üí• Excepci√≥n en /predict: {e}")

    class UsuarioDeCarga(HttpUser):
        wait_time = between(1, 5)
        tasks = [FlujoDeInferencia]
---
apiVersion: v1
kind: Service
metadata:
  name: locust
  namespace: mlops-project
spec:
  type: NodePort
  selector:
    app: locust
  ports:
  - port: 8089
    targetPort: 8089
    nodePort: 31000
