# üîß REEMPLAZA EXACTAMENTE tu funci√≥n get_shap_summary_plot() con esta:

def get_shap_summary_plot():
    """SHAP analysis usando solo caracter√≠sticas num√©ricas para evitar problemas de dimensionalidad"""
    
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    plt.ioff()
    
    try:
        # ‚úÖ Verificar modelo cargado
        if current_model_name not in loaded_models:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.text(0.5, 0.5, 
                   "‚ùå No hay modelo cargado\n\nPor favor:\n1. Ve a 'Predicci√≥n'\n2. Actualiza modelos\n3. Carga un modelo", 
                   ha='center', va='center', fontsize=14, 
                   transform=ax.transAxes,
                   bbox=dict(boxstyle="round,pad=0.5", facecolor="lightblue"))
            ax.axis('off')
            plt.title("An√°lisis SHAP - Estado", fontsize=16)
            return fig
        
        # ‚úÖ Verificar SHAP disponible
        try:
            import shap
            print("‚úÖ SHAP importado correctamente")
        except ImportError:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.text(0.5, 0.5, 
                   "‚ùå SHAP no est√° disponible\n\nContacta al administrador\npara instalar: pip install shap", 
                   ha='center', va='center', fontsize=14, 
                   transform=ax.transAxes,
                   bbox=dict(boxstyle="round,pad=0.5", facecolor="lightyellow"))
            ax.axis('off')
            plt.title("An√°lisis SHAP - Dependencia faltante", fontsize=16)
            return fig
        
        model = loaded_models[current_model_name]
        print(f"üìä Iniciando an√°lisis SHAP para modelo: {current_model_name}")
        
        # ‚úÖ ESTRATEGIA NUEVA: Solo usar caracter√≠sticas num√©ricas + a√±o
        # Esto evita completamente el problema de dimensionalidad
        
        # Crear dataset variado con solo caracter√≠sticas num√©ricas
        numeric_features = ['bed', 'bath', 'acre_lot', 'house_size', 'prev_sold_year']
        
        # Datos de ejemplo diversos para SHAP
        shap_samples = pd.DataFrame({
            'bed': [2, 3, 4, 5, 2, 3, 4, 1],
            'bath': [1, 2, 3, 3, 1, 2, 2, 1], 
            'acre_lot': [0.15, 0.25, 0.35, 0.45, 0.20, 0.30, 0.40, 0.10],
            'house_size': [1000, 1500, 2000, 2500, 1200, 1800, 2200, 800],
            'prev_sold_year': [2020, 2019, 2018, 2017, 2021, 2016, 2015, 2022]
        })
        
        print(f"üìä Dataset SHAP shape: {shap_samples.shape}")
        
        # ‚úÖ Funci√≥n wrapper que convierte caracter√≠sticas num√©ricas a predicci√≥n completa
        def numeric_to_prediction(X_numeric):
            """
            Convierte caracter√≠sticas num√©ricas a predicci√≥n completa del modelo
            X_numeric: array con [bed, bath, acre_lot, house_size, prev_sold_year]
            """
            predictions = []
            
            for i in range(X_numeric.shape[0]):
                # Crear un registro completo con valores por defecto para categ√≥ricas
                full_record = {
                    # Caracter√≠sticas num√©ricas del SHAP
                    'bed': X_numeric[i, 0],
                    'bath': X_numeric[i, 1],
                    'acre_lot': X_numeric[i, 2], 
                    'house_size': X_numeric[i, 3],
                    'prev_sold_year': int(X_numeric[i, 4]),
                    
                    # Valores representativos para categ√≥ricas (no afectan SHAP)
                    'brokered_by': '101640.0',
                    'status': 'for_sale', 
                    'street': '1758218.0',
                    'city': 'East Windsor',
                    'state': 'Connecticut',
                    'zip_code': '6016.0',
                    'prev_sold_date': f"{int(X_numeric[i, 4])}-01-01"
                }
                
                # Convertir a DataFrame y procesar
                df = pd.DataFrame([full_record])
                processed = preprocess_input(df)
                pred = model.predict(processed)
                predictions.append(pred[0])
            
            return np.array(predictions)
        
        # ‚úÖ Preparar datos para SHAP
        X_numeric = shap_samples[numeric_features].values
        print(f"üìä Caracter√≠sticas num√©ricas preparadas: {X_numeric.shape}")
        
        # Verificar que las predicciones funcionan
        test_predictions = numeric_to_prediction(X_numeric[:2])
        print(f"‚úÖ Test predictions exitoso: {test_predictions}")
        
        # ‚úÖ Crear SHAP explainer
        # Usar background peque√±o para eficiencia
        background_indices = [0, 2, 4]  # 3 muestras representativas
        background = X_numeric[background_indices]
        
        print("üìä Creando SHAP explainer...")
        explainer = shap.Explainer(numeric_to_prediction, background)
        
        # ‚úÖ Calcular SHAP values para un subset de muestras
        analysis_indices = [0, 1, 3, 5]  # 4 muestras para an√°lisis
        X_analysis = X_numeric[analysis_indices]
        
        print("üìä Calculando SHAP values...")
        shap_values = explainer(X_analysis)
        print(f"‚úÖ SHAP values calculados: {shap_values.values.shape}")
        
        # ‚úÖ Crear visualizaci√≥n
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Nombres descriptivos para las caracter√≠sticas
        feature_names = [
            'Habitaciones',
            'Ba√±os', 
            'Terreno (acres)',
            'Tama√±o casa (sqft)',
            'A√±o venta anterior'
        ]
        
        # SHAP summary plot
        shap.summary_plot(
            shap_values.values, 
            X_analysis,
            feature_names=feature_names,
            show=False,
            max_display=len(feature_names)
        )
        
        plt.title(f"SHAP - Importancia de Caracter√≠sticas\nModelo: {current_model_name}", 
                 fontsize=14, pad=20)
        plt.xlabel("Impacto en el precio de la casa", fontsize=12)
        plt.tight_layout()
        
        print("‚úÖ SHAP plot generado exitosamente")
        return fig
        
    except Exception as e:
        # Mostrar error espec√≠fico en una figura
        fig, ax = plt.subplots(figsize=(12, 8))
        
        error_msg = str(e)
        if "shape" in error_msg.lower():
            error_text = f"‚ùå Error de dimensionalidad:\n\n{error_msg[:300]}...\n\n"
            error_text += "üîß Soluciones intentadas:\n"
            error_text += "‚Ä¢ Usar solo caracter√≠sticas num√©ricas\n"
            error_text += "‚Ä¢ Reducir samples de an√°lisis\n"
            error_text += "‚Ä¢ Background simplificado\n\n"
            error_text += "üí° Contacta soporte para optimizaci√≥n adicional"
        else:
            error_text = f"‚ùå Error en an√°lisis SHAP:\n\n{error_msg[:400]}...\n\n"
            error_text += "Verifica:\n‚Ä¢ Modelo cargado correctamente\n‚Ä¢ Datos de entrada v√°lidos"
        
        ax.text(0.05, 0.95, error_text, 
               ha='left', va='top', fontsize=10, 
               transform=ax.transAxes,
               bbox=dict(boxstyle="round,pad=0.5", facecolor="lightcoral"),
               wrap=True)
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')
        plt.title("An√°lisis SHAP - Error", fontsize=16)
        
        # Log para debugging
        print(f"‚ùå SHAP Error: {str(e)}")
        import traceback
        traceback.print_exc()
        
        return fig