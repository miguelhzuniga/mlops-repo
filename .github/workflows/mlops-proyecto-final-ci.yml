name: Construir y Subir Imágenes MLOps

on:
  push:
    branches: [ '*' ]
    paths:
      - 'proyecto-04/01_Primera_maquina/airflow/Dockerfile'
      - 'proyecto-04/01_Primera_maquina/airflow/requirements.txt'
      - 'proyecto-04/01_Primera_maquina/airflow/dags/**'
      - 'proyecto-04/01_Primera_maquina/mlflow/Dockerfile.mlflow'
      - 'proyecto-04/01_Primera_maquina/mlflow/manifests/**'
      - 'proyecto-04/02_Segunda_maquina/api/fastapi/**'
      - 'proyecto-04/02_Segunda_maquina/api/gradio/**'
      - '.github/workflows/mlops-images.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'proyecto-04/01_Primera_maquina/airflow/Dockerfile'
      - 'proyecto-04/01_Primera_maquina/airflow/requirements.txt'
      - 'proyecto-04/01_Primera_maquina/airflow/dags/**'
      - 'proyecto-04/01_Primera_maquina/mlflow/Dockerfile.mlflow'
      - 'proyecto-04/01_Primera_maquina/mlflow/manifests/**'
      - 'proyecto-04/02_Segunda_maquina/api/fastapi/**'
      - 'proyecto-04/02_Segunda_maquina/api/gradio/**'

env:
  REGISTRY: docker.io

jobs:
  build-airflow:
    name: Construir Imagen Airflow
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Iniciar sesión en Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extraer metadatos de Airflow
      id: meta-airflow
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/airflow-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Construir y subir imagen Airflow
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/01_Primera_maquina/airflow
        file: ./proyecto-04/01_Primera_maquina/airflow/Dockerfile
        push: true
        tags: ${{ steps.meta-airflow.outputs.tags }}
        labels: ${{ steps.meta-airflow.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=airflow
        cache-to: type=gha,mode=max,scope=airflow
        
    - name: Extraer tag de despliegue
      id: extract-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "tag=$(date '+%Y%m%d')-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Resumen imagen Airflow
      run: |
        echo "Imagen Airflow construida y subida exitosamente!"
        echo "Imagen: ${{ secrets.DOCKER_USERNAME }}/airflow-houses"
        echo "Tags: ${{ steps.meta-airflow.outputs.tags }}"
        echo "Tag de despliegue: ${{ steps.extract-tag.outputs.tag }}"

  build-mlflow:
    name: Construir Imagen MLflow
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Iniciar sesión en Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extraer metadatos de MLflow
      id: meta-mlflow
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/mlflow-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Construir y subir imagen MLflow
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/01_Primera_maquina/mlflow
        file: ./proyecto-04/01_Primera_maquina/mlflow/Dockerfile.mlflow
        push: true
        tags: ${{ steps.meta-mlflow.outputs.tags }}
        labels: ${{ steps.meta-mlflow.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=mlflow
        cache-to: type=gha,mode=max,scope=mlflow
        
    - name: Extraer tag de despliegue
      id: extract-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "tag=$(date '+%Y%m%d')-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Resumen imagen MLflow
      run: |
        echo "Imagen MLflow construida y subida exitosamente!"
        echo "Imagen: ${{ secrets.DOCKER_USERNAME }}/mlflow-houses"
        echo "Tags: ${{ steps.meta-mlflow.outputs.tags }}"
        echo "Tag de despliegue: ${{ steps.extract-tag.outputs.tag }}"

  build-fastapi:
    name: Construir Imagen FastAPI
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Iniciar sesión en Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extraer metadatos de FastAPI
      id: meta-fastapi
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/fastapi-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Construir y subir imagen FastAPI
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/02_Segunda_maquina/api/fastapi
        file: ./proyecto-04/02_Segunda_maquina/api/fastapi/Dockerfile
        push: true
        tags: ${{ steps.meta-fastapi.outputs.tags }}
        labels: ${{ steps.meta-fastapi.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=fastapi
        cache-to: type=gha,mode=max,scope=fastapi
        
    - name: Extraer tag de despliegue
      id: extract-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "tag=$(date '+%Y%m%d')-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Resumen imagen FastAPI
      run: |
        echo "Imagen FastAPI construida y subida exitosamente!"
        echo "Imagen: ${{ secrets.DOCKER_USERNAME }}/fastapi-houses"
        echo "Tags: ${{ steps.meta-fastapi.outputs.tags }}"
        echo "Tag de despliegue: ${{ steps.extract-tag.outputs.tag }}"

  build-gradio:
    name: Construir Imagen Gradio
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Iniciar sesión en Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extraer metadatos de Gradio
      id: meta-gradio
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/gradio-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Construir y subir imagen Gradio
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/02_Segunda_maquina/api/gradio
        file: ./proyecto-04/02_Segunda_maquina/api/gradio/Dockerfile
        push: true
        tags: ${{ steps.meta-gradio.outputs.tags }}
        labels: ${{ steps.meta-gradio.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=gradio
        cache-to: type=gha,mode=max,scope=gradio
        
    - name: Extraer tag de despliegue
      id: extract-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "tag=$(date '+%Y%m%d')-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Resumen imagen Gradio
      run: |
        echo "Imagen Gradio construida y subida exitosamente!"
        echo "Imagen: ${{ secrets.DOCKER_USERNAME }}/gradio-houses"
        echo "Tags: ${{ steps.meta-gradio.outputs.tags }}"
        echo "Tag de despliegue: ${{ steps.extract-tag.outputs.tag }}"

  actualizar-manifiestos:
    name: Actualizar Manifiestos de Kubernetes
    runs-on: ubuntu-latest
    needs: [build-airflow, build-mlflow, build-fastapi, build-gradio]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Configurar Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Actualizar manifiestos
      run: |
        MLFLOW_TAG="${{ needs.build-mlflow.outputs.image-tag }}"
        FASTAPI_TAG="${{ needs.build-fastapi.outputs.image-tag }}"
        GRADIO_TAG="${{ needs.build-gradio.outputs.image-tag }}"
        
        echo "Actualizando manifiestos..."
        echo "MLflow tag: $MLFLOW_TAG"
        echo "FastAPI tag: $FASTAPI_TAG"
        echo "Gradio tag: $GRADIO_TAG"
        
        # Actualizar MLflow
        if [[ -f "proyecto-04/01_Primera_maquina/mlflow/manifests/mlflow.yaml" ]]; then
          sed -i -E "s|(image:.*${{ secrets.DOCKER_USERNAME }}/mlflow-houses):.*|\1:${MLFLOW_TAG}|g" "proyecto-04/01_Primera_maquina/mlflow/manifests/mlflow.yaml"
          echo "MLflow manifest actualizado"
        fi
        
        # Actualizar FastAPI
        if [[ -f "proyecto-04/02_Segunda_maquina/api/fastapi/fastapi-deployment.yaml" ]]; then
          sed -i -E "s|(image:.*${{ secrets.DOCKER_USERNAME }}/fastapi-houses):.*|\1:${FASTAPI_TAG}|g" "proyecto-04/02_Segunda_maquina/api/fastapi/fastapi-deployment.yaml"
          echo "FastAPI manifest actualizado"
        fi
        
        # Actualizar Gradio
        if [[ -f "proyecto-04/02_Segunda_maquina/api/gradio/gradio-deployment.yaml" ]]; then
          sed -i -E "s|(image:.*${{ secrets.DOCKER_USERNAME }}/gradio-houses):.*|\1:${GRADIO_TAG}|g" "proyecto-04/02_Segunda_maquina/api/gradio/gradio-deployment.yaml"
          echo "Gradio manifest actualizado"
        fi
        
    - name: Commit y push cambios
      run: |
        git add -A
        if [[ -n $(git status --porcelain) ]]; then
          git commit -m "Auto-update image tags - Build ${{ github.sha }}"
          git push
          echo "Cambios commitados y pusheados"
        else
          echo "No hay cambios para commitear"
        fi
        
    - name: Info Argo CD
      run: |
        echo "Manifiestos actualizados exitosamente"
        echo "Aplicaciones Argo CD afectadas:"
        echo "- mlflow-app"
        echo "- fastapi-app" 
        echo "- gradio-app"
        echo "Argo CD sincronizara automaticamente en ~3 minutos"

  resumen-despliegue:
    name: Resumen del Despliegue
    runs-on: ubuntu-latest
    needs: [build-airflow, build-mlflow, build-fastapi, build-gradio, actualizar-manifiestos]
    if: always()
    
    steps:
    - name: Estado del despliegue
      run: |
        echo "=== RESUMEN PIPELINE MLOPS ==="
        echo "Build Airflow: ${{ needs.build-airflow.result }}"
        echo "Build MLflow: ${{ needs.build-mlflow.result }}"
        echo "Build FastAPI: ${{ needs.build-fastapi.result }}"
        echo "Build Gradio: ${{ needs.build-gradio.result }}"
        echo "Update Manifests: ${{ needs.actualizar-manifiestos.result }}"
        echo ""
        echo "Rama: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo ""
        
        if [[ "${{ needs.build-airflow.result }}" == "success" && "${{ needs.build-mlflow.result }}" == "success" && "${{ needs.build-fastapi.result }}" == "success" && "${{ needs.build-gradio.result }}" == "success" ]]; then
          echo "TODAS LAS IMAGENES CONSTRUIDAS EXITOSAMENTE"
          echo ""
          echo "Imagenes disponibles:"
          echo "- ${{ secrets.DOCKER_USERNAME }}/airflow-houses:${{ needs.build-airflow.outputs.image-tag }}"
          echo "- ${{ secrets.DOCKER_USERNAME }}/mlflow-houses:${{ needs.build-mlflow.outputs.image-tag }}"
          echo "- ${{ secrets.DOCKER_USERNAME }}/fastapi-houses:${{ needs.build-fastapi.outputs.image-tag }}"
          echo "- ${{ secrets.DOCKER_USERNAME }}/gradio-houses:${{ needs.build-gradio.outputs.image-tag }}"
          
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo ""
            echo "DESPLIEGUE EN PRODUCCION:"
            if [[ "${{ needs.actualizar-manifiestos.result }}" == "success" ]]; then
              echo "- Manifiestos K8s actualizados automaticamente"
              echo "- Argo CD sincronizara en ~3 minutos"
            else
              echo "- ERROR: Actualizacion de manifiestos fallo"
            fi
          else
            echo ""
            echo "RAMA DE DESARROLLO - Sin despliegue automatico"
          fi
        else
          echo "ERROR: Algunos builds fallaron"
          exit 1
        fi