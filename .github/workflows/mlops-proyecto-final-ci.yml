name: Construir y Subir Imágenes MLOps

on:
  push:
    branches: [ '*' ]
    paths:
      - 'proyecto-04/01_Primera_maquina/airflow/Dockerfile'
      - 'proyecto-04/01_Primera_maquina/airflow/requirements.txt'
      - 'proyecto-04/01_Primera_maquina/airflow/dags/**'
      - 'proyecto-04/01_Primera_maquina/mlflow/Dockerfile.mlflow'
      - 'proyecto-04/01_Primera_maquina/mlflow/manifests/**'
      - 'proyecto-04/02_Segunda_maquina/api/fastapi/**'
      - 'proyecto-04/02_Segunda_maquina/api/gradio/**'
      - '.github/workflows/mlops-images.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'proyecto-04/01_Primera_maquina/airflow/Dockerfile'
      - 'proyecto-04/01_Primera_maquina/airflow/requirements.txt'
      - 'proyecto-04/01_Primera_maquina/airflow/dags/**'
      - 'proyecto-04/01_Primera_maquina/mlflow/Dockerfile.mlflow'
      - 'proyecto-04/01_Primera_maquina/mlflow/manifests/**'
      - 'proyecto-04/02_Segunda_maquina/api/fastapi/**'
      - 'proyecto-04/02_Segunda_maquina/api/gradio/**'

env:
  REGISTRY: docker.io

jobs:
  build-airflow:
    name: Construir Imagen Airflow
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Iniciar sesión en Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extraer metadatos de Airflow
      id: meta-airflow
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/airflow-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Construir y subir imagen Airflow
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/01_Primera_maquina/airflow
        file: ./proyecto-04/01_Primera_maquina/airflow/Dockerfile
        push: true
        tags: ${{ steps.meta-airflow.outputs.tags }}
        labels: ${{ steps.meta-airflow.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=airflow
        cache-to: type=gha,mode=max,scope=airflow
        
    - name: Extraer tag de despliegue
      id: extract-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "tag=$(date '+%Y%m%d')-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Resumen imagen Airflow
      run: |
        echo "Imagen Airflow construida y subida exitosamente!"
        echo "Imagen: ${{ secrets.DOCKER_USERNAME }}/airflow-houses"
        echo "Tags: ${{ steps.meta-airflow.outputs.tags }}"
        echo "Tag de despliegue: ${{ steps.extract-tag.outputs.tag }}"
        echo "Nota: Airflow se despliega independientemente con Docker Compose"

  build-mlflow:
    name: Construir Imagen MLflow
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Iniciar sesión en Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extraer metadatos de MLflow
      id: meta-mlflow
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/mlflow-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Construir y subir imagen MLflow
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/01_Primera_maquina/mlflow
        file: ./proyecto-04/01_Primera_maquina/mlflow/Dockerfile.mlflow
        push: true
        tags: ${{ steps.meta-mlflow.outputs.tags }}
        labels: ${{ steps.meta-mlflow.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=mlflow
        cache-to: type=gha,mode=max,scope=mlflow
        
    - name: Extraer tag de despliegue
      id: extract-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "tag=$(date '+%Y%m%d')-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Resumen imagen MLflow
      run: |
        echo "Imagen MLflow construida y subida exitosamente!"
        echo "Imagen: ${{ secrets.DOCKER_USERNAME }}/mlflow-houses"
        echo "Tags: ${{ steps.meta-mlflow.outputs.tags }}"
        echo "Tag de despliegue: ${{ steps.extract-tag.outputs.tag }}"

  build-fastapi:
    name: Construir Imagen FastAPI
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Iniciar sesión en Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extraer metadatos de FastAPI
      id: meta-fastapi
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/fastapi-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Construir y subir imagen FastAPI
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/02_Segunda_maquina/api/fastapi
        file: ./proyecto-04/02_Segunda_maquina/api/fastapi/Dockerfile
        push: true
        tags: ${{ steps.meta-fastapi.outputs.tags }}
        labels: ${{ steps.meta-fastapi.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=fastapi
        cache-to: type=gha,mode=max,scope=fastapi
        
    - name: Extraer tag de despliegue
      id: extract-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "tag=$(date '+%Y%m%d')-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Resumen imagen FastAPI
      run: |
        echo "Imagen FastAPI construida y subida exitosamente!"
        echo "Imagen: ${{ secrets.DOCKER_USERNAME }}/fastapi-houses"
        echo "Tags: ${{ steps.meta-fastapi.outputs.tags }}"
        echo "Tag de despliegue: ${{ steps.extract-tag.outputs.tag }}"

  build-gradio:
    name: Construir Imagen Gradio
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.extract-tag.outputs.tag }}
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Iniciar sesión en Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extraer metadatos de Gradio
      id: meta-gradio
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/gradio-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Construir y subir imagen Gradio
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/02_Segunda_maquina/api/gradio
        file: ./proyecto-04/02_Segunda_maquina/api/gradio/Dockerfile
        push: true
        tags: ${{ steps.meta-gradio.outputs.tags }}
        labels: ${{ steps.meta-gradio.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=gradio
        cache-to: type=gha,mode=max,scope=gradio
        
    - name: Extraer tag de despliegue
      id: extract-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "tag=$(date '+%Y%m%d')-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Resumen imagen Gradio
      run: |
        echo "Imagen Gradio construida y subida exitosamente!"
        echo "Imagen: ${{ secrets.DOCKER_USERNAME }}/gradio-houses"
        echo "Tags: ${{ steps.meta-gradio.outputs.tags }}"
        echo "Tag de despliegue: ${{ steps.extract-tag.outputs.tag }}"

  actualizar-manifiestos:
    name: Actualizar Manifiestos de Kubernetes
    runs-on: ubuntu-latest
    needs: [build-airflow, build-mlflow, build-fastapi, build-gradio]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Descargar código
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Configurar Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Actualizar tags de imágenes en manifiestos
      run: |
        # Usar los tags que generaron los builds
        MLFLOW_TAG="${{ needs.build-mlflow.outputs.image-tag }}"
        FASTAPI_TAG="${{ needs.build-fastapi.outputs.image-tag }}"
        GRADIO_TAG="${{ needs.build-gradio.outputs.image-tag }}"
        
        echo "Actualizando manifiestos con tags:"
        echo "  MLflow: $MLFLOW_TAG"
        echo "  FastAPI: $FASTAPI_TAG"
        echo "  Gradio: $GRADIO_TAG"
        
        # Función para actualizar archivos YAML
        actualizar_archivos_yaml() {
          local archivo=$1
          local nombre_imagen=$2
          local nuevo_tag=$3
          
          echo ""
          echo "Procesando archivo: $archivo"
          echo "Imagen a buscar: $nombre_imagen"
          echo "Nuevo tag: $nuevo_tag"
          
          if [[ -f "$archivo" ]]; then
            # Crear backup
            cp "$archivo" "$archivo.bak"
            
            # Buscar líneas con la imagen antes del cambio
            echo "Líneas actuales que coinciden:"
            grep -n "image:.*${nombre_imagen}" "$archivo" || echo "No se encontraron líneas con la imagen"
            
            # Actualizar la imagen usando sed con una expresión más específica
            sed -i -E "s|(image:.*${nombre_imagen}):.*|\1:${nuevo_tag}|g" "$archivo"
            
            # Verificar si hubo cambios
            if ! cmp -s "$archivo" "$archivo.bak"; then
              echo "Actualizado: $archivo"
              echo "Líneas después del cambio:"
              grep -n "image:.*${nombre_imagen}" "$archivo" || echo "No se encontraron líneas después del cambio"
              rm "$archivo.bak"
              return 0
            else
              echo "Sin cambios: $archivo"
              rm "$archivo.bak"
              return 1
            fi
          else
            echo "Archivo no encontrado: $archivo"
            return 1
          fi
        }
        
        echo "Iniciando actualización de manifiestos..."
        
        # Actualizar MLflow
        echo ""
        echo "=== ACTUALIZANDO MLFLOW ==="
        actualizar_archivos_yaml "proyecto-04/01_Primera_maquina/mlflow/manifests/mlflow.yaml" "${{ secrets.DOCKER_USERNAME }}/mlflow-houses" "$MLFLOW_TAG"
        MLFLOW_UPDATED=$?
        
        # Actualizar FastAPI
        echo ""
        echo "=== ACTUALIZANDO FASTAPI ==="
        actualizar_archivos_yaml "proyecto-04/02_Segunda_maquina/api/fastapi/fastapi-deployment.yaml" "${{ secrets.DOCKER_USERNAME }}/fastapi-houses" "$FASTAPI_TAG"
        FASTAPI_UPDATED=$?
        
        # Actualizar Gradio
        echo ""
        echo "=== ACTUALIZANDO GRADIO ==="
        actualizar_archivos_yaml "proyecto-04/02_Segunda_maquina/api/gradio/gradio-deployment.yaml" "${{ secrets.DOCKER_USERNAME }}/gradio-houses" "$GRADIO_TAG"
        GRADIO_UPDATED=$?
        
        echo ""
        echo "Resumen de actualizaciones:"
        [[ $MLFLOW_UPDATED -eq 0 ]] && echo "MLflow actualizado" || echo "MLflow no se actualizó"
        [[ $FASTAPI_UPDATED -eq 0 ]] && echo "FastAPI actualizado" || echo "FastAPI no se actualizó"
        [[ $GRADIO_UPDATED -eq 0 ]] && echo "Gradio actualizado" || echo "Gradio no se actualizó"
        
        echo ""
        echo "Proceso de actualización completado!"
        
    - name: Mostrar cambios
      run: |
        echo "Estado de Git después de las actualizaciones:"
        git status --porcelain
        
        if [[ -n $(git status --porcelain) ]]; then
          echo ""
          echo "Archivos modificados:"
          git diff --name-only
          echo ""
          echo "Cambios detallados:"
          git diff --unified=3
        else
          echo "No se modificaron archivos de manifiestos"
        fi
        
    - name: Confirmar y subir cambios
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "Confirmando cambios..."
          
          # Agregar solo los archivos que existen y han cambiado
          [[ -f "proyecto-04/01_Primera_maquina/mlflow/manifests/mlflow.yaml" ]] && git add "proyecto-04/01_Primera_maquina/mlflow/manifests/mlflow.yaml"
          [[ -f "proyecto-04/02_Segunda_maquina/api/fastapi/fastapi-deployment.yaml" ]] && git add "proyecto-04/02_Segunda_maquina/api/fastapi/fastapi-deployment.yaml"  
          [[ -f "proyecto-04/02_Segunda_maquina/api/gradio/gradio-deployment.yaml" ]] && git add "proyecto-04/02_Segunda_maquina/api/gradio/gradio-deployment.yaml"
          
          # Crear mensaje de commit
          git commit -m "Auto-actualización tags de imágenes
          
Build: ${{ github.sha }}
Imágenes construidas:
- ${{ secrets.DOCKER_USERNAME }}/airflow-houses:${{ needs.build-airflow.outputs.image-tag }}
- ${{ secrets.DOCKER_USERNAME }}/mlflow-houses:${{ needs.build-mlflow.outputs.image-tag }}
- ${{ secrets.DOCKER_USERNAME }}/fastapi-houses:${{ needs.build-fastapi.outputs.image-tag }}
- ${{ secrets.DOCKER_USERNAME }}/gradio-houses:${{ needs.build-gradio.outputs.image-tag }}

Manifiestos K8s actualizados:
- proyecto-04/01_Primera_maquina/mlflow/manifests/mlflow.yaml
- proyecto-04/02_Segunda_maquina/api/fastapi/fastapi-deployment.yaml
- proyecto-04/02_Segunda_maquina/api/gradio/gradio-deployment.yaml

Nota: Airflow se despliega con Docker Compose independientemente

Disparado por: ${{ github.event.head_commit.message }}"
          
          echo "Subiendo cambios..."
          git push
          echo "Cambios subidos exitosamente!"
        else
          echo "No hay cambios para confirmar"
        fi
        
    - name: Información de Argo CD
      run: |
        echo "Manifiestos actualizados exitosamente!"
        echo ""
        echo "Aplicaciones de Argo CD que se sincronizarán:"
        echo "- mlflow-app (proyecto-04/01_Primera_maquina/mlflow/manifests)"
        echo "- fastapi-app (proyecto-04/02_Segunda_maquina/api/fastapi)"
        echo "- gradio-app (proyecto-04/02_Segunda_maquina/api/gradio)"
        echo ""
        echo "Argo CD detectará los cambios en ~3 minutos (intervalo de sincronización por defecto)"
        echo "O puedes sincronizar manualmente desde la UI de Argo CD"
        echo "UI de Argo CD: https://localhost:30443"

  resumen-despliegue:
    name: Resumen del Despliegue
    runs-on: ubuntu-latest
    needs: [build-airflow, build-mlflow, build-fastapi, build-gradio, actualizar-manifiestos]
    if: always()
    
    steps:
    - name: Estado del despliegue
      run: |
        echo "Resumen de Ejecución del Pipeline MLOps"
        echo "=================================================="
        echo ""
        echo "Resultados de Build:"
        echo "- Build Airflow:          ${{ needs.build-airflow.result }}"
        echo "- Build MLflow:           ${{ needs.build-mlflow.result }}"
        echo "- Build FastAPI:          ${{ needs.build-fastapi.result }}"
        echo "- Build Gradio:           ${{ needs.build-gradio.result }}"
        echo "- Actualizar Manifiestos: ${{ needs.actualizar-manifiestos.result }}"
        echo ""
        echo "Rama: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo ""
        echo "Nota: Airflow se despliega independientemente con Docker Compose"
        echo ""
        
        if [[ "${{ needs.build-airflow.result }}" == "success" && "${{ needs.build-mlflow.result }}" == "success" && "${{ needs.build-fastapi.result }}" == "success" && "${{ needs.build-gradio.result }}" == "success" ]]; then
          echo "Todas las imágenes construidas exitosamente!"
          echo ""
          echo "Imágenes disponibles:"
          echo "- ${{ secrets.DOCKER_USERNAME }}/airflow-houses:${{ needs.build-airflow.outputs.image-tag }}"
          echo "- ${{ secrets.DOCKER_USERNAME }}/mlflow-houses:${{ needs.build-mlflow.outputs.image-tag }}"
          echo "- ${{ secrets.DOCKER_USERNAME }}/fastapi-houses:${{ needs.build-fastapi.outputs.image-tag }}"
          echo "- ${{ secrets.DOCKER_USERNAME }}/gradio-houses:${{ needs.build-gradio.outputs.image-tag }}"
          
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo ""
            echo "Despliegue en Producción (rama master):"
            if [[ "${{ needs.actualizar-manifiestos.result }}" == "success" ]]; then
              echo "Manifiestos de Kubernetes actualizados automáticamente"
              echo "Argo CD sincronizará las nuevas imágenes en ~3 minutos"
              echo "Monitorear despliegue: https://localhost:30443"
            elif [[ "${{ needs.actualizar-manifiestos.result }}" == "skipped" ]]; then
              echo "Actualización de manifiestos omitida (no es push a master)"
            else
              echo "Actualización de manifiestos falló - intervención manual necesaria"
            fi
            echo ""
            echo "Comandos de despliegue manual (si es necesario):"
            echo "- Airflow (Docker Compose): cd proyecto-04/01_Primera_maquina/airflow && docker-compose pull && docker-compose up -d"
            echo "- MLflow: sudo microk8s kubectl set image deployment/mlflow mlflow=${{ secrets.DOCKER_USERNAME }}/mlflow-houses:${{ needs.build-mlflow.outputs.image-tag }} -n mlops-project"
            echo "- FastAPI: sudo microk8s kubectl set image deployment/fastapi-housing fastapi-housing=${{ secrets.DOCKER_USERNAME }}/fastapi-houses:${{ needs.build-fastapi.outputs.image-tag }} -n mlops-project"
            echo "- Gradio: sudo microk8s kubectl set image deployment/gradio-housing gradio-housing=${{ secrets.DOCKER_USERNAME }}/gradio-houses:${{ needs.build-gradio.outputs.image-tag }} -n mlops-project"
          else
            echo ""
            echo "Rama de Desarrollo (${{ github.ref_name }}):"
            echo "- Imágenes disponibles para pruebas"
            echo "- Sin despliegue automático en producción"
            echo "- Hacer merge a master para despliegue automático"
          fi
        else
          echo "Algunos builds fallaron!"
          echo ""
          echo "Componentes fallidos:"
          [[ "${{ needs.build-airflow.result }}" != "success" ]] && echo "- Airflow: ${{ needs.build-airflow.result }}"
          [[ "${{ needs.build-mlflow.result }}" != "success" ]] && echo "- MLflow: ${{ needs.build-mlflow.result }}"
          [[ "${{ needs.build-fastapi.result }}" != "success" ]] && echo "- FastAPI: ${{ needs.build-fastapi.result }}"
          [[ "${{ needs.build-gradio.result }}" != "success" ]] && echo "- Gradio: ${{ needs.build-gradio.result }}"
          [[ "${{ needs.actualizar-manifiestos.result }}" == "failure" ]] && echo "- Actualización de Manifiestos: ${{ needs.actualizar-manifiestos.result }}"
          echo ""
          echo "Revisar los logs arriba para más detalles"
          exit 1
        fi