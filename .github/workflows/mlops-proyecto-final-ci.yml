name: Build and Push MLOps Images

on:
  push:
    branches: [ '*' ]
    paths:
      - 'proyecto-04/01_Primera_maquina/airflow/Dockerfile'
      - 'proyecto-04/01_Primera_maquina/airflow/requirements.txt'
      - 'proyecto-04/01_Primera_maquina/airflow/dags/**'
      - 'proyecto-04/01_Primera_maquina/mlflow/Dockerfile.mlflow'
      - 'proyecto-04/01_Primera_maquina/mlflow/manifests/**'
      - 'proyecto-04/02_Segunda_maquina/api/fastapi/**'
      - 'proyecto-04/02_Segunda_maquina/api/gradio/**'
      - '.github/workflows/mlops-images.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'proyecto-04/01_Primera_maquina/airflow/Dockerfile'
      - 'proyecto-04/01_Primera_maquina/airflow/requirements.txt'
      - 'proyecto-04/01_Primera_maquina/airflow/dags/**'
      - 'proyecto-04/01_Primera_maquina/mlflow/Dockerfile.mlflow'
      - 'proyecto-04/01_Primera_maquina/mlflow/manifests/**'
      - 'proyecto-04/02_Segunda_maquina/api/fastapi/**'
      - 'proyecto-04/02_Segunda_maquina/api/gradio/**'

env:
  REGISTRY: docker.io

jobs:
  build-airflow:
    name: Build Airflow Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract Airflow metadata
      id: meta-airflow
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/airflow-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Build and push Airflow image
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/01_Primera_maquina/airflow
        file: ./proyecto-04/01_Primera_maquina/airflow/Dockerfile
        push: true
        tags: ${{ steps.meta-airflow.outputs.tags }}
        labels: ${{ steps.meta-airflow.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=airflow
        cache-to: type=gha,mode=max,scope=airflow
        
    - name: Airflow image summary
      run: |
        echo " Airflow image built and pushed successfully!"
        echo " Image: ${{ secrets.DOCKER_USERNAME }}/airflow-houses"
        echo " Tags: ${{ steps.meta-airflow.outputs.tags }}"

  build-mlflow:
    name: Build MLflow Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract MLflow metadata
      id: meta-mlflow
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/mlflow-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Build and push MLflow image
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/01_Primera_maquina/mlflow
        file: ./proyecto-04/01_Primera_maquina/mlflow/Dockerfile.mlflow
        push: true
        tags: ${{ steps.meta-mlflow.outputs.tags }}
        labels: ${{ steps.meta-mlflow.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=mlflow
        cache-to: type=gha,mode=max,scope=mlflow
        
    - name: MLflow image summary
      run: |
        echo "‚úÖ MLflow image built and pushed successfully!"
        echo "üì¶ Image: ${{ secrets.DOCKER_USERNAME }}/mlflow-houses"
        echo "üè∑Ô∏è Tags: ${{ steps.meta-mlflow.outputs.tags }}"

  build-fastapi:
    name: Build FastAPI Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract FastAPI metadata
      id: meta-fastapi
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/fastapi-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Build and push FastAPI image
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/02_Segunda_maquina/api/fastapi
        file: ./proyecto-04/02_Segunda_maquina/api/fastapi/Dockerfile
        push: true
        tags: ${{ steps.meta-fastapi.outputs.tags }}
        labels: ${{ steps.meta-fastapi.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=fastapi
        cache-to: type=gha,mode=max,scope=fastapi
        
    - name: FastAPI image summary
      run: |
        echo "‚úÖ FastAPI image built and pushed successfully!"
        echo "üì¶ Image: ${{ secrets.DOCKER_USERNAME }}/fastapi-houses"
        echo "üè∑Ô∏è Tags: ${{ steps.meta-fastapi.outputs.tags }}"

  build-gradio:
    name: Build Gradio Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract Gradio metadata
      id: meta-gradio
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/gradio-houses
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          type=sha,prefix={{date 'YYYYMMDD'}}-
          
    - name: Build and push Gradio image
      uses: docker/build-push-action@v5
      with:
        context: ./proyecto-04/02_Segunda_maquina/api/gradio
        file: ./proyecto-04/02_Segunda_maquina/api/gradio/Dockerfile
        push: true
        tags: ${{ steps.meta-gradio.outputs.tags }}
        labels: ${{ steps.meta-gradio.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=gradio
        cache-to: type=gha,mode=max,scope=gradio
        
    - name: Gradio image summary
      run: |
        echo " Gradio image built and pushed successfully!"
        echo " Image: ${{ secrets.DOCKER_USERNAME }}/gradio-houses"
        echo " Tags: ${{ steps.meta-gradio.outputs.tags }}"

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-airflow, build-mlflow, build-fastapi, build-gradio]
    if: always()
    
    steps:
    - name: Deployment status
      run: |
        echo " MLOps Images Build Summary"
        echo "================================"
        echo "Airflow Build: ${{ needs.build-airflow.result }}"
        echo "MLflow Build: ${{ needs.build-mlflow.result }}"
        echo "FastAPI Build: ${{ needs.build-fastapi.result }}"
        echo "Gradio Build: ${{ needs.build-gradio.result }}"
        echo "Branch: ${{ github.ref_name }}"
        echo ""
        if [[ "${{ needs.build-airflow.result }}" == "success" && "${{ needs.build-mlflow.result }}" == "success" && "${{ needs.build-fastapi.result }}" == "success" && "${{ needs.build-gradio.result }}" == "success" ]]; then
          echo " All images built successfully!"
          echo ""
          echo "Available images:"
          echo "‚Ä¢ ${{ secrets.DOCKER_USERNAME }}/airflow-houses:${{ github.ref_name }}"
          echo "‚Ä¢ ${{ secrets.DOCKER_USERNAME }}/mlflow-houses:${{ github.ref_name }}"
          echo "‚Ä¢ ${{ secrets.DOCKER_USERNAME }}/fastapi-houses:${{ github.ref_name }}"
          echo "‚Ä¢ ${{ secrets.DOCKER_USERNAME }}/gradio-houses:${{ github.ref_name }}"
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "‚Ä¢ ${{ secrets.DOCKER_USERNAME }}/airflow-houses:latest"
            echo "‚Ä¢ ${{ secrets.DOCKER_USERNAME }}/mlflow-houses:latest"
            echo "‚Ä¢ ${{ secrets.DOCKER_USERNAME }}/fastapi-houses:latest"
            echo "‚Ä¢ ${{ secrets.DOCKER_USERNAME }}/gradio-houses:latest"
          fi
          echo ""
          echo "Next steps:"
          echo "1. For Airflow: cd proyecto-04/01_Primera_maquina/airflow && ./deploy.sh pull && ./deploy.sh restart"
          echo "2. For MLflow: cd proyecto-04/01_Primera_maquina/mlflow && ./deploy.sh"
          echo "3. For API Services: cd proyecto-04/02_Segunda_maquina/api && ./deploy.sh"
        else
          echo " Some builds failed. Check the logs above."
          exit 1
        fi