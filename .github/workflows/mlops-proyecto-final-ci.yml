name: MLOps Platform CI Pipeline

on:
  push:
    branches: [ "*" ]  
    paths:
      - 'proyecto-04/01_Primera_maquina/**'
      - 'proyecto-04/02_Segunda_maquina/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ master ]  

permissions:
  contents: write  

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push FastAPI
        uses: docker/build-push-action@v5
        with:
          context: ./proyecto-04/02_Segunda_maquina/api/fastapi
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/mlops-fastapi:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/mlops-fastapi:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Gradio
        uses: docker/build-push-action@v5
        with:
          context: ./proyecto-04/02_Segunda_maquina/api/gradio
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/mlops-gradio:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/mlops-gradio:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Airflow
        uses: docker/build-push-action@v5
        with:
          context: ./proyecto-04/01_Primera_maquina/airflow
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/mlops-airflow:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/mlops-airflow:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push MLflow
        uses: docker/build-push-action@v5
        with:
          context: ./proyecto-04/01_Primera_maquina/mlflow/docker
          file: ./proyecto-04/01_Primera_maquina/mlflow/docker/Dockerfile.mlflow
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/mlops-mlflow:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/mlops-mlflow:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  
  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update FastAPI image tags
        run: |
          cd proyecto-04/02_Segunda_maquina/api/fastapi
          sed -i "s|image: .*/mlops-fastapi:.*|image: ${{ env.DOCKER_USERNAME }}/mlops-fastapi:${{ env.IMAGE_TAG }}|g" fastapi-deployment.yaml

      - name: Update Gradio image tags  
        run: |
          cd proyecto-04/02_Segunda_maquina/api/gradio
          sed -i "s|image: .*/mlops-gradio:.*|image: ${{ env.DOCKER_USERNAME }}/mlops-gradio:${{ env.IMAGE_TAG }}|g" gradio-deployment.yaml

      - name: Update MLflow image tags
        run: |
          cd proyecto-04/01_Primera_maquina/mlflow/manifests
          sed -i "s|image: .*/mlops-mlflow:.*|image: ${{ env.DOCKER_USERNAME }}/mlops-mlflow:${{ env.IMAGE_TAG }}|g" mlflow.yaml

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git pull --rebase
          git add proyecto-04/01_Primera_maquina/mlflow/manifests proyecto-04/02_Segunda_maquina/api
          git commit -m "üöÄ Update image tags to ${{ env.IMAGE_TAG }}" || echo "No changes to commit"
          git push

  
  notify-ready:
    needs: update-manifests
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Ready Notification
        run: |
          echo "‚úÖ CI Pipeline completed successfully!"
          echo ""
          echo "üì¶ Images built and pushed:"
          echo "- ${{ env.DOCKER_USERNAME }}/mlops-fastapi:${{ env.IMAGE_TAG }}"
          echo "- ${{ env.DOCKER_USERNAME }}/mlops-gradio:${{ env.IMAGE_TAG }}"
          echo "- ${{ env.DOCKER_USERNAME }}/mlops-airflow:${{ env.IMAGE_TAG }}"
          echo "- ${{ env.DOCKER_USERNAME }}/mlops-mlflow:${{ env.IMAGE_TAG }}"
          echo ""
          echo "üìù Kubernetes manifests updated in Git"
          echo "üöÄ Argo CD should now detect changes and deploy automatically"
          echo ""
          echo "üîç Next steps:"
          echo "1. Check Argo CD UI for automatic sync"
          echo "2. Verify pods are updated with new images"
          echo "3. Test services are working correctly"