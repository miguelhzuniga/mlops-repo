name: MLOps Proyecto Final - PR Validation

on:
  pull_request:
    branches: [ master ]
    paths:
      - 'proyecto-04/01_Primera_maquina/**'
      - 'proyecto-04/02_Segunda_maquina/**'
      - '.github/workflows/**'

jobs:
  
  validate-builds:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test build FastAPI (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./proyecto-04/02_Segunda_maquina/api/fastapi
          push: false
          tags: test/mlops-fastapi:pr-${{ github.event.number }}
          cache-from: type=gha
          
      - name: Test build Gradio (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./proyecto-04/02_Segunda_maquina/api/gradio
          push: false
          tags: test/mlops-gradio:pr-${{ github.event.number }}
          cache-from: type=gha

      - name: Test build Airflow (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./proyecto-04/01_Primera_maquina/airflow
          push: false
          tags: test/mlops-airflow:pr-${{ github.event.number }}
          cache-from: type=gha

      - name: Test build MLflow (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./proyecto-04/01_Primera_maquina/mlflow/docker
          file: ./proyecto-04/01_Primera_maquina/mlflow/docker/Dockerfile.mlflow
          push: false
          tags: test/mlops-mlflow:pr-${{ github.event.number }}
          cache-from: type=gha

  
  check-requirements:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Verify FastAPI requirements
        run: |
          echo "📦 Checking FastAPI requirements..."
          cd proyecto-04/02_Segunda_maquina/api/fastapi
          pip install --dry-run -r requirements.txt
          
      - name: Verify Gradio requirements  
        run: |
          echo "📦 Checking Gradio requirements..."
          cd proyecto-04/02_Segunda_maquina/api/gradio
          pip install --dry-run -r requirements.txt

  
  validate-manifests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Validate FastAPI manifests syntax
        run: |
          echo "🔍 Validating FastAPI K8s manifests syntax..."
          kubectl --dry-run=client apply -f proyecto-04/02_Segunda_maquina/api/fastapi/ || echo "FastAPI manifests syntax validation completed"
          
      - name: Validate Gradio manifests syntax
        run: |
          echo "🔍 Validating Gradio K8s manifests syntax..."
          kubectl --dry-run=client apply -f proyecto-04/02_Segunda_maquina/api/gradio/ || echo "Gradio manifests syntax validation completed"
          
      - name: Validate MLflow manifests syntax
        run: |
          echo "🔍 Validating MLflow K8s manifests syntax..."
          kubectl --dry-run=client apply -f proyecto-04/01_Primera_maquina/mlflow/manifests/ || echo "MLflow manifests syntax validation completed"

  
  pr-summary:
    runs-on: ubuntu-latest
    needs: [validate-builds, check-requirements, validate-manifests]
    if: always()
    steps:
      - name: PR Validation Summary
        run: |
          echo "
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Builds | ${{ needs.validate-builds.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Requirements Check | ${{ needs.check-requirements.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| K8s Manifests | ${{ needs.validate-manifests.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate-builds.result }}" == "success" && 
                "${{ needs.check-requirements.result }}" == "success" && 
                "${{ needs.validate-manifests.result }}" == "success" ]]; then
            echo "✅ **PR is ready to merge!** All validations passed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚀 **After merge to master:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Images will be built and pushed to DockerHub automatically" >> $GITHUB_STEP_SUMMARY
            echo "2. K8s manifests will be updated in Git" >> $GITHUB_STEP_SUMMARY
            echo "3. Argo CD will detect changes and deploy automatically" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **PR needs fixes** before merging." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the failed jobs above and fix the issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi