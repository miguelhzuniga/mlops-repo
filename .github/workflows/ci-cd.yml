name: ML API CI/CD Pipeline

on:
  push:
    branches: [ "*" ]  # Ejecutar en cualquier rama
    paths:
      - 'Taller_CICD/api/**'
      - 'Taller_CICD/loadtester/**'
      - 'Taller_CICD/manifests/**'
      - 'Taller_CICD/.github/workflows/ci-cd.yml'

  pull_request:
    branches: [ master ]  # Solo ejecutar PRs hacia master
    paths:
      - 'Taller_CICD/api/**'
      - 'Taller_CICD/loadtester/**'
      - 'Taller_CICD/manifests/**'

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_TAG: ${{ github.sha }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd Taller_CICD/api
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          cd Taller_CICD/api
          pytest --cov=. --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./Taller_CICD/api/coverage.xml
          fail_ci_if_error: false
          # token: ${{ secrets.CODECOV_TOKEN }} # Descomenta si el repo es privado

  train-and-build:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd Taller_CICD/api
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify data exists
        run: |
          if [ ! -f "Taller_CICD/api/data/iris.csv" ]; then
            echo "ERROR: Dataset not found at Taller_CICD/api/data/iris.csv"
            exit 1
          fi

      - name: Evaluate and compare model
        run: |
          cd Taller_CICD/api
          python evaluate_and_compare.py

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Taller_CICD/api
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/ml-api:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/ml-api:latest

      - name: Build and push LoadTester Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Taller_CICD/loadtester
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/load-tester:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_USERNAME }}/load-tester:latest

      - name: Save model artifact
        uses: actions/upload-artifact@v4
        with:
          name: model-artifact
          path: |
            Taller_CICD/api/app/model.pkl
            Taller_CICD/api/app/model_info.pkl

  update-manifests:
    needs: train-and-build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update image tags
        run: |
          cd Taller_CICD/manifests
          find . -type f -name "*.yaml" -exec sed -i "s|\${DOCKER_USERNAME}|${DOCKER_USERNAME}|g" {} \;
          find . -type f -name "*.yaml" -exec sed -i "s|\${IMAGE_TAG}|${IMAGE_TAG}|g" {} \;

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git pull --rebase
          git add Taller_CICD/manifests
          git commit -m "Update image tags to ${{ env.IMAGE_TAG }}" || echo "No changes to commit"
          git push

  deploy:
    needs: update-manifests
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes credentials
        run: |
          mkdir -p $HOME/.kube
          echo "${{ env.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f Taller_CICD/manifests/

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/ml-api -n default
